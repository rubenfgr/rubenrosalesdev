//
// Prisma schema for rubenrosalesdev portfolio
// Adjust models as needed for your portfolio

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id             String          @id @default(uuid())
    name           String
    email          String          @unique
    role           Role            @default(USER)
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
    posts          Post[]
    profile        Profile?
    projects       Project[]
    experiences    Experience[]
    certifications Certification[]
}

enum Role {
    ADMIN
    USER
}

enum PostStatus {
  draft
  published
}

model Post {
    id          String          @id @default(uuid())
    title       String
    summary     String?
    content     String
    published   Boolean         @default(false)
    status      PostStatus      @default(draft)
    tags        String[]
    publishedAt DateTime?
    createdAt   DateTime        @default(now())
    updatedAt   DateTime        @updatedAt
    author      User            @relation(fields: [authorId], references: [id])
    authorId    String
    techStack   PostTechStack[]
}

model Profile {
    id        String  @id @default(uuid())
    bio       String
    avatarUrl String?
    location  String?
    website   String?
    user      User    @relation(fields: [userId], references: [id])
    userId    String  @unique
}

model Project {
    id          String             @id @default(uuid())
    title       String
    description String
    url         String?
    imageUrl    String?
    startDate   DateTime
    endDate     DateTime?
    user        User               @relation(fields: [userId], references: [id])
    userId      String
    techStack   ProjectTechStack[]
}

model Experience {
    id          String                @id @default(uuid())
    company     String
    position    String
    description String
    startDate   DateTime
    endDate     DateTime?
    user        User                  @relation(fields: [userId], references: [id])
    userId      String
    techStack   ExperienceTechStack[]
}

enum SkillLevel {
  beginner
  intermediate
  advanced
}

model TechStack {
    id          String                @id @default(uuid())
    name        String
    level       SkillLevel?           // e.g. 'beginner', 'intermediate', 'advanced'
    projects    ProjectTechStack[]
    experiences ExperienceTechStack[]
    posts       PostTechStack[]
}

model ProjectTechStack {
    id          String    @id @default(uuid())
    project     Project   @relation(fields: [projectId], references: [id])
    projectId   String
    techStack   TechStack @relation(fields: [techStackId], references: [id])
    techStackId String
}

model ExperienceTechStack {
    id           String     @id @default(uuid())
    experience   Experience @relation(fields: [experienceId], references: [id])
    experienceId String
    techStack    TechStack  @relation(fields: [techStackId], references: [id])
    techStackId  String
}

model PostTechStack {
    id          String    @id @default(uuid())
    post        Post      @relation(fields: [postId], references: [id])
    postId      String
    techStack   TechStack @relation(fields: [techStackId], references: [id])
    techStackId String
}

model Certification {
    id     String   @id @default(uuid())
    name   String
    issuer String
    date   DateTime
    url    String?
    user   User     @relation(fields: [userId], references: [id])
    userId String
}
