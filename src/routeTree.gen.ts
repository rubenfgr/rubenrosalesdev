/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { ServerRoute as ApiHealthServerRouteImport } from './routes/api/health'
import { ServerRoute as ApiCertificationsServerRouteImport } from './routes/api/certifications'
import { ServerRoute as ApiExperiencesIndexServerRouteImport } from './routes/api/experiences/index'
import { ServerRoute as ApiCertificationsIndexServerRouteImport } from './routes/api/certifications/index'
import { ServerRoute as ApiExperiencesIdServerRouteImport } from './routes/api/experiences/$id'
import { ServerRoute as ApiCertificationsIdServerRouteImport } from './routes/api/certifications/$id'

const rootServerRouteImport = createServerRootRoute()

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiHealthServerRoute = ApiHealthServerRouteImport.update({
  id: '/api/health',
  path: '/api/health',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiCertificationsServerRoute = ApiCertificationsServerRouteImport.update({
  id: '/api/certifications',
  path: '/api/certifications',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiExperiencesIndexServerRoute =
  ApiExperiencesIndexServerRouteImport.update({
    id: '/api/experiences/',
    path: '/api/experiences/',
    getParentRoute: () => rootServerRouteImport,
  } as any)
const ApiCertificationsIndexServerRoute =
  ApiCertificationsIndexServerRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => ApiCertificationsServerRoute,
  } as any)
const ApiExperiencesIdServerRoute = ApiExperiencesIdServerRouteImport.update({
  id: '/api/experiences/$id',
  path: '/api/experiences/$id',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiCertificationsIdServerRoute =
  ApiCertificationsIdServerRouteImport.update({
    id: '/$id',
    path: '/$id',
    getParentRoute: () => ApiCertificationsServerRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/admin': typeof AdminIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin/': typeof AdminIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/admin'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/admin'
  id: '__root__' | '/' | '/admin/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminIndexRoute: typeof AdminIndexRoute
}
export interface FileServerRoutesByFullPath {
  '/api/certifications': typeof ApiCertificationsServerRouteWithChildren
  '/api/health': typeof ApiHealthServerRoute
  '/api/certifications/$id': typeof ApiCertificationsIdServerRoute
  '/api/experiences/$id': typeof ApiExperiencesIdServerRoute
  '/api/certifications/': typeof ApiCertificationsIndexServerRoute
  '/api/experiences': typeof ApiExperiencesIndexServerRoute
}
export interface FileServerRoutesByTo {
  '/api/health': typeof ApiHealthServerRoute
  '/api/certifications/$id': typeof ApiCertificationsIdServerRoute
  '/api/experiences/$id': typeof ApiExperiencesIdServerRoute
  '/api/certifications': typeof ApiCertificationsIndexServerRoute
  '/api/experiences': typeof ApiExperiencesIndexServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/certifications': typeof ApiCertificationsServerRouteWithChildren
  '/api/health': typeof ApiHealthServerRoute
  '/api/certifications/$id': typeof ApiCertificationsIdServerRoute
  '/api/experiences/$id': typeof ApiExperiencesIdServerRoute
  '/api/certifications/': typeof ApiCertificationsIndexServerRoute
  '/api/experiences/': typeof ApiExperiencesIndexServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths:
    | '/api/certifications'
    | '/api/health'
    | '/api/certifications/$id'
    | '/api/experiences/$id'
    | '/api/certifications/'
    | '/api/experiences'
  fileServerRoutesByTo: FileServerRoutesByTo
  to:
    | '/api/health'
    | '/api/certifications/$id'
    | '/api/experiences/$id'
    | '/api/certifications'
    | '/api/experiences'
  id:
    | '__root__'
    | '/api/certifications'
    | '/api/health'
    | '/api/certifications/$id'
    | '/api/experiences/$id'
    | '/api/certifications/'
    | '/api/experiences/'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiCertificationsServerRoute: typeof ApiCertificationsServerRouteWithChildren
  ApiHealthServerRoute: typeof ApiHealthServerRoute
  ApiExperiencesIdServerRoute: typeof ApiExperiencesIdServerRoute
  ApiExperiencesIndexServerRoute: typeof ApiExperiencesIndexServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/health': {
      id: '/api/health'
      path: '/api/health'
      fullPath: '/api/health'
      preLoaderRoute: typeof ApiHealthServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/certifications': {
      id: '/api/certifications'
      path: '/api/certifications'
      fullPath: '/api/certifications'
      preLoaderRoute: typeof ApiCertificationsServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/experiences/': {
      id: '/api/experiences/'
      path: '/api/experiences'
      fullPath: '/api/experiences'
      preLoaderRoute: typeof ApiExperiencesIndexServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/certifications/': {
      id: '/api/certifications/'
      path: '/'
      fullPath: '/api/certifications/'
      preLoaderRoute: typeof ApiCertificationsIndexServerRouteImport
      parentRoute: typeof ApiCertificationsServerRoute
    }
    '/api/experiences/$id': {
      id: '/api/experiences/$id'
      path: '/api/experiences/$id'
      fullPath: '/api/experiences/$id'
      preLoaderRoute: typeof ApiExperiencesIdServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/certifications/$id': {
      id: '/api/certifications/$id'
      path: '/$id'
      fullPath: '/api/certifications/$id'
      preLoaderRoute: typeof ApiCertificationsIdServerRouteImport
      parentRoute: typeof ApiCertificationsServerRoute
    }
  }
}

interface ApiCertificationsServerRouteChildren {
  ApiCertificationsIdServerRoute: typeof ApiCertificationsIdServerRoute
  ApiCertificationsIndexServerRoute: typeof ApiCertificationsIndexServerRoute
}

const ApiCertificationsServerRouteChildren: ApiCertificationsServerRouteChildren =
  {
    ApiCertificationsIdServerRoute: ApiCertificationsIdServerRoute,
    ApiCertificationsIndexServerRoute: ApiCertificationsIndexServerRoute,
  }

const ApiCertificationsServerRouteWithChildren =
  ApiCertificationsServerRoute._addFileChildren(
    ApiCertificationsServerRouteChildren,
  )

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminIndexRoute: AdminIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiCertificationsServerRoute: ApiCertificationsServerRouteWithChildren,
  ApiHealthServerRoute: ApiHealthServerRoute,
  ApiExperiencesIdServerRoute: ApiExperiencesIdServerRoute,
  ApiExperiencesIndexServerRoute: ApiExperiencesIndexServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
